package main

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/foolin/pagser"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/option"
	"google.golang.org/api/sheets/v4"
	"io"
	"log"
	"net/http"
	"os"
)

func main() {
	response, err := http.Get("https://confluence.hflabs.ru/rest/api/content/1181220999?expand=body.storage")
	if err != nil {
		log.Fatalln(fmt.Errorf("countIn: %w", err))
	}
	defer response.Body.Close()
	var result AutoGenerated
	body, err := io.ReadAll(response.Body)
	err = json.Unmarshal(body, &result)
	if err != nil {
		log.Fatalln(fmt.Errorf("countIn: %w", err))
	}
	p := pagser.New()
	var table TableStruct
	err = p.Parse(&table, result.Body.Storage.Value)
	if err != nil {
		log.Fatalln(fmt.Errorf("HTML parse: %w", err))
	}

	ctx := context.Background()
	b, err := os.ReadFile("credentials.json")
	if err != nil {
		log.Fatalf("Unable to read client secret file: %v", err)
	}
	// If modifying these scopes, delete your previously saved token.json.
	config, err := google.ConfigFromJSON(b, "https://www.googleapis.com/auth/spreadsheets")
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}
	client := getClient(config)

	srv, err := sheets.NewService(ctx, option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Unable to retrieve Sheets client: %v", err)
	}
	spreadsheetId := "19yimGlxzvTzFAzAf6WmdFSrKpuWvRFFVPDRTteGC8Rw"
	r, err := srv.Spreadsheets.Values.Clear(spreadsheetId, "Лист1", &sheets.ClearValuesRequest{}).Context(ctx).Do()
	if err != nil || r.HTTPStatusCode != 200 {
		log.Fatal(err)
	}

	row := &sheets.ValueRange{
		Values: [][]interface{}{},
	}

	header := make([]interface{}, 0, len(table.Thead))
	for _, cell := range table.Thead {
		header = append(header, interface{}(cell))
	}
	row.Values = append(row.Values, header)

	maxCellsCount := len(table.Thead)
	for _, trow := range table.Tbody {
		if len(trow.Cells) > maxCellsCount {
			maxCellsCount = len(trow.Cells)
		}
		rrow := make([]interface{}, 0, len(trow.Cells))
		for _, cell := range trow.Cells {
			rrow = append(rrow, interface{}(cell.Value)) //
		}
		row.Values = append(row.Values, rrow)
	}
	rangeTable := fmt.Sprintf("R1C1:R%dC%d", len(row.Values), maxCellsCount)

	resp2, err := srv.Spreadsheets.Values.Update(spreadsheetId, rangeTable, row).ValueInputOption("USER_ENTERED").Context(ctx).Do()
	if err != nil || resp2.HTTPStatusCode != 200 {
		log.Fatal(err)
	}
}

type Cell struct {
	Value string `pagser:"->text()"`
}

type Row struct {
	Cells []Cell `pagser:"td" `
}

type TableStruct struct {
	Thead []string `pagser:"table thead th"`
	Tbody []Row    `pagser:"table tbody tr" `
}

type AutoGenerated struct {
	ID     string `json:"id"`
	Type   string `json:"type"`
	Status string `json:"status"`
	Title  string `json:"title"`
	Body   struct {
		Storage struct {
			Value          string `json:"value"`
			Representation string `json:"representation"`
			Expandable     struct {
				Content string `json:"content"`
			} `json:"_expandable"`
		} `json:"storage"`
		Expandable struct {
			Editor              string `json:"editor"`
			View                string `json:"view"`
			ExportView          string `json:"export_view"`
			StyledView          string `json:"styled_view"`
			AnonymousExportView string `json:"anonymous_export_view"`
		} `json:"_expandable"`
	} `json:"body"`
	Extensions struct {
		Position string `json:"position"`
	} `json:"extensions"`
	Links struct {
		Webui      string `json:"webui"`
		Edit       string `json:"edit"`
		Tinyui     string `json:"tinyui"`
		Collection string `json:"collection"`
		Base       string `json:"base"`
		Context    string `json:"context"`
		Self       string `json:"self"`
	} `json:"_links"`
	Expandable struct {
		Container    string `json:"container"`
		Metadata     string `json:"metadata"`
		Operations   string `json:"operations"`
		Children     string `json:"children"`
		Restrictions string `json:"restrictions"`
		History      string `json:"history"`
		Ancestors    string `json:"ancestors"`
		Version      string `json:"version"`
		Descendants  string `json:"descendants"`
		Space        string `json:"space"`
	} `json:"_expandable"`
}

// Request a token from the web, then returns the retrieved token.
func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	fmt.Printf("Go to the following link in your browser then type the "+
		"authorization code: \n%v\n", authURL)

	var authCode string
	if _, err := fmt.Scan(&authCode); err != nil {
		log.Fatalf("Unable to read authorization code: %v", err)
	}

	tok, err := config.Exchange(context.TODO(), authCode)
	if err != nil {
		log.Fatalf("Unable to retrieve token from web: %v", err)
	}
	return tok
}

// Retrieve a token, saves the token, then returns the generated client.
func getClient(config *oauth2.Config) *http.Client {
	// The file token.json stores the user's access and refresh tokens, and is
	// created automatically when the authorization flow completes for the first
	// time.
	tokFile := "token.json"
	tok, err := tokenFromFile(tokFile)
	if err != nil {
		tok = getTokenFromWeb(config)
		saveToken(tokFile, tok)
	}
	return config.Client(context.Background(), tok)
}

// Retrieves a token from a local file.
func tokenFromFile(file string) (*oauth2.Token, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	tok := &oauth2.Token{}
	err = json.NewDecoder(f).Decode(tok)
	return tok, err
}

// Saves a token to a file path.
func saveToken(path string, token *oauth2.Token) {
	fmt.Printf("Saving credential file to: %s\n", path)
	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalf("Unable to cache oauth token: %v", err)
	}
	defer f.Close()
	json.NewEncoder(f).Encode(token)
}
